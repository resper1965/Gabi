version: "3.9"

networks:
  gabi-network:
    driver: bridge

volumes:
  db_data:
  redis_data:

services:
  # Banco de dados PostgreSQL + pgvector
  db:
    image: ankane/pgvector:latest
    container_name: gabi-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: gabi
      POSTGRES_PASSWORD: ${DB_PASSWORD:-gabi_prod_2024}
      POSTGRES_DB: gabi_prod
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - gabi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gabi -d gabi_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis para cache e sess√µes
  redis:
    image: redis:7-alpine
    container_name: gabi-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-gabi_redis_prod_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - gabi-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-gabi_redis_prod_2024}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Traefik - Proxy reverso e SSL
  traefik:
    image: traefik:v2.11
    container_name: gabi-traefik-prod
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--log.level=INFO"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@gabi.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - gabi-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Gabi OS - AgentOS Runtime
  gabi-os:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.gabi-os
    container_name: gabi-os-prod
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://gabi:${DB_PASSWORD:-gabi_prod_2024}@db:5432/gabi_prod
      REDIS_URL: redis://:${REDIS_PASSWORD:-gabi_redis_prod_2024}@redis:6379/0
      OS_SECURITY_KEY: ${OS_SECURITY_KEY:-gabi_prod_security_key_2024}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AGNO_LOG_LEVEL: INFO
      AGNO_ENABLE_TELEMETRY: "false"
      DEFAULT_MODEL: ${DEFAULT_MODEL:-gpt-4o}
      ENABLE_USER_MEMORIES: "true"
      ENABLE_SESSION_SUMMARIES: "true"
      MAX_HISTORY_RUNS: "5"
      PORT: 7777
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "7777:7777"
    networks:
      - gabi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gabi-os.rule=Host(`${DOMAIN:-gabi.local}`) && PathPrefix(`/os`)"
      - "traefik.http.routers.gabi-os.entrypoints=web"
      - "traefik.http.routers.gabi-os-secure.rule=Host(`${DOMAIN:-gabi.local}`) && PathPrefix(`/os`)"
      - "traefik.http.routers.gabi-os-secure.entrypoints=websecure"
      - "traefik.http.routers.gabi-os-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.gabi-os.loadbalancer.server.port=7777"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7777/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Gabi Ingest - Worker de processamento
  gabi-ingest:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.gabi-ingest
    container_name: gabi-ingest-prod
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://gabi:${DB_PASSWORD:-gabi_prod_2024}@db:5432/gabi_prod
      REDIS_URL: redis://:${REDIS_PASSWORD:-gabi_redis_prod_2024}@redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PORT: 8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - gabi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gabi-ingest.rule=Host(`${DOMAIN:-gabi.local}`) && PathPrefix(`/ingest`)"
      - "traefik.http.routers.gabi-ingest.entrypoints=web"
      - "traefik.http.routers.gabi-ingest-secure.rule=Host(`${DOMAIN:-gabi.local}`) && PathPrefix(`/ingest`)"
      - "traefik.http.routers.gabi-ingest-secure.entrypoints=websecure"
      - "traefik.http.routers.gabi-ingest-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.gabi-ingest.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Gabi Chat - Interface Next.js
  gabi-chat:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.gabi-chat
    container_name: gabi-chat-prod
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_AGENTOS_URL: http://gabi-os:7777
      NEXT_PUBLIC_INGEST_URL: http://gabi-ingest:8000
      NODE_ENV: production
      PORT: 3000
    depends_on:
      gabi-os:
        condition: service_healthy
      gabi-ingest:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - gabi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gabi-chat.rule=Host(`${DOMAIN:-gabi.local}`)"
      - "traefik.http.routers.gabi-chat.entrypoints=web"
      - "traefik.http.routers.gabi-chat-secure.rule=Host(`${DOMAIN:-gabi.local}`)"
      - "traefik.http.routers.gabi-chat-secure.entrypoints=websecure"
      - "traefik.http.routers.gabi-chat-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.gabi-chat.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

volumes:
  letsencrypt:
